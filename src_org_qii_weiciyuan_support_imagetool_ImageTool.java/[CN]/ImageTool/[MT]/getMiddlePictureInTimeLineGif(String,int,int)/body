{
  int useWidth=400;
  final BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(absoluteFilePath,options);
  final int height=options.outHeight;
  final int width=options.outWidth;
  options.inSampleSize=calculateInSampleSize(options,useWidth,reqHeight);
  options.inJustDecodeBounds=false;
  options.inPurgeable=true;
  options.inInputShareable=true;
  Bitmap bitmap=BitmapFactory.decodeFile(absoluteFilePath,options);
  if (height >= reqHeight && width >= useWidth) {
    Bitmap region=Bitmap.createBitmap(bitmap,0,0,useWidth,reqHeight);
    bitmap.recycle();
    return region;
  }
 else   if (height < reqHeight && width >= useWidth) {
    int cutHeight=height;
    int cutWidth=(useWidth / reqHeight) * cutHeight;
    Bitmap region=Bitmap.createBitmap(bitmap,0,0,cutWidth,reqHeight);
    bitmap.recycle();
    return region;
  }
 else   if (height >= reqHeight && width < useWidth) {
    int cutWidth=width;
    int cutHeight=(reqHeight * cutWidth) / useWidth;
    Bitmap region=Bitmap.createBitmap(bitmap,0,0,cutWidth,reqHeight);
    bitmap.recycle();
    return region;
  }
 else   if (height < reqHeight && width < useWidth) {
    int cutWidth=0;
    int cutHeight=0;
    int betweenWidth=useWidth - width;
    int betweenHeight=reqHeight - height;
    if (betweenWidth > betweenHeight) {
      cutWidth=width;
      cutHeight=(reqHeight * cutWidth) / useWidth;
    }
 else {
      cutHeight=height;
      cutWidth=(useWidth / reqHeight) * cutHeight;
    }
    Bitmap region=Bitmap.createBitmap(bitmap,0,0,cutWidth,reqHeight);
    bitmap.recycle();
    return region;
  }
  return null;
}
