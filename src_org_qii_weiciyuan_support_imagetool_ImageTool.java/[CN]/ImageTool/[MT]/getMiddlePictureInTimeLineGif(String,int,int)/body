{
  int useWidth=400;
  final BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(absoluteFilePath,options);
  options.inSampleSize=calculateInSampleSize(options,useWidth,reqHeight);
  options.inJustDecodeBounds=false;
  options.inPurgeable=true;
  options.inInputShareable=true;
  Bitmap bitmap=BitmapFactory.decodeFile(absoluteFilePath,options);
  int height=options.outHeight;
  int width=options.outWidth;
  int cutHeight=0;
  int cutWidth=0;
  if (height >= reqHeight && width >= useWidth) {
    cutHeight=reqHeight;
    cutWidth=useWidth;
  }
 else   if (height < reqHeight && width >= useWidth) {
    cutHeight=height;
    cutWidth=(useWidth * cutHeight) / reqHeight;
  }
 else   if (height >= reqHeight && width < useWidth) {
    cutWidth=width;
    cutHeight=(reqHeight * cutWidth) / useWidth;
  }
 else   if (height < reqHeight && width < useWidth) {
    int betweenWidth=useWidth - width;
    int betweenHeight=reqHeight - height;
    if (betweenWidth > betweenHeight) {
      cutHeight=height;
      cutWidth=(useWidth * cutHeight) / reqHeight;
    }
 else {
      cutWidth=width;
      cutHeight=(reqHeight * cutWidth) / useWidth;
    }
  }
  if (cutWidth > 0 && cutHeight > 0) {
    Bitmap region=Bitmap.createBitmap(bitmap,0,0,cutWidth,cutHeight);
    Bitmap anotherValue=ImageEdit.getRoundedCornerBitmap(region);
    bitmap.recycle();
    region.recycle();
    return anotherValue;
  }
  return null;
}
