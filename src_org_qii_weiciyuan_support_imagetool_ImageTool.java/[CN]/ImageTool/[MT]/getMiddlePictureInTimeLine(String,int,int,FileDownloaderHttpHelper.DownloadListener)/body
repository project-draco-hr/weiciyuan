{
  int useWidth=reqWidth;
  String absoluteFilePath=FileManager.getFileAbsolutePathFromUrl(url,FileLocationMethod.picture_bmiddle);
  File file=new File(absoluteFilePath);
  if (!file.exists() && !GlobalContext.getInstance().isEnablePic()) {
    return null;
  }
  if (!file.exists()) {
    String path=getBitmapFromNetWork(url,absoluteFilePath,downloadListener);
  }
  if (absoluteFilePath.endsWith(".gif")) {
    return getMiddlePictureInTimeLineGif(absoluteFilePath,reqWidth,reqHeight);
  }
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(absoluteFilePath,options);
  int height=options.outHeight;
  int width=options.outWidth;
  int cutHeight=0;
  int cutWidth=0;
  if (height >= reqHeight && width >= useWidth) {
    cutHeight=reqHeight;
    cutWidth=useWidth;
  }
 else   if (height < reqHeight && width >= useWidth) {
    cutHeight=height;
    cutWidth=(useWidth * cutHeight) / reqHeight;
  }
 else   if (height >= reqHeight && width < useWidth) {
    cutWidth=width;
    cutHeight=(reqHeight * cutWidth) / useWidth;
  }
 else   if (height < reqHeight && width < useWidth) {
    float betweenWidth=((float)useWidth - (float)width) / (float)width;
    float betweenHeight=((float)reqHeight - (float)height) / (float)height;
    if (betweenWidth > betweenHeight) {
      cutWidth=width;
      cutHeight=(reqHeight * cutWidth) / useWidth;
    }
 else {
      cutHeight=height;
      cutWidth=(useWidth * cutHeight) / reqHeight;
    }
  }
  if (cutWidth > 0 && cutHeight > 0) {
    int startX=0;
    if (cutWidth < width) {
      startX=(width - cutWidth) / 2;
    }
    try {
      BitmapRegionDecoder decoder=BitmapRegionDecoder.newInstance(absoluteFilePath,false);
      Bitmap region=decoder.decodeRegion(new Rect(startX,0,startX + cutWidth,cutHeight),null);
      Bitmap scale=null;
      if (region.getHeight() < reqHeight && region.getWidth() < reqWidth) {
        scale=Bitmap.createScaledBitmap(region,reqWidth,reqHeight,true);
      }
      if (scale == null) {
        Bitmap anotherValue=ImageEdit.getRoundedCornerBitmap(region);
        region.recycle();
        return anotherValue;
      }
 else {
        Bitmap anotherValue=ImageEdit.getRoundedCornerBitmap(scale);
        region.recycle();
        scale.recycle();
        return anotherValue;
      }
    }
 catch (    IOException ignored) {
    }
  }
  return null;
}
