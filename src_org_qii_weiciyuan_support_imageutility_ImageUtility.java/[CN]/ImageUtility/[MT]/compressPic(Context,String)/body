{
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=false;
  options.inSampleSize=1;
switch (SettingUtility.getUploadQuality()) {
case 1:
    return picPath;
case 2:
  options.inSampleSize=2;
break;
case 3:
options.inSampleSize=4;
break;
case 4:
options.inSampleSize=2;
if (Utility.isWifi(context)) {
return picPath;
}
break;
}
Bitmap bitmap=BitmapFactory.decodeFile(picPath,options);
int exifRotation=ImageUtility.getFileExifRotation(picPath);
if (exifRotation != 0) {
Matrix mtx=new Matrix();
mtx.postRotate(exifRotation);
Bitmap adjustedBitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),mtx,true);
if (adjustedBitmap != bitmap) {
bitmap.recycle();
bitmap=adjustedBitmap;
}
}
FileOutputStream stream=null;
String tmp=FileManager.getUploadPicTempFile();
try {
new File(tmp).getParentFile().mkdirs();
new File(tmp).createNewFile();
stream=new FileOutputStream(new File(tmp));
}
 catch (IOException ignored) {
}
bitmap.compress(Bitmap.CompressFormat.JPEG,100,stream);
if (stream != null) {
try {
stream.close();
bitmap.recycle();
}
 catch (IOException ignored) {
}
}
return tmp;
}
