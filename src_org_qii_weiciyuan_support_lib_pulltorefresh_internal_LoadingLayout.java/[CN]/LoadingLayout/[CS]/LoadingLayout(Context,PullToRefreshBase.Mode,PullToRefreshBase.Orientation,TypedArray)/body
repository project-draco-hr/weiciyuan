{
  super(context);
  mMode=mode;
  mScrollDirection=scrollDirection;
switch (scrollDirection) {
case HORIZONTAL:
    LayoutInflater.from(context).inflate(R.layout.pull_to_refresh_header_horizontal,this);
  break;
case VERTICAL:
default :
LayoutInflater.from(context).inflate(R.layout.pull_to_refresh_header_vertical,this);
break;
}
mInnerLayout=(FrameLayout)findViewById(R.id.fl_inner);
mHeaderText=(TextView)mInnerLayout.findViewById(R.id.pull_to_refresh_text);
mHeaderProgress=(ProgressBar)mInnerLayout.findViewById(R.id.pull_to_refresh_progress);
mSubHeaderText=(TextView)mInnerLayout.findViewById(R.id.pull_to_refresh_sub_text);
mHeaderImage=(ImageView)mInnerLayout.findViewById(R.id.pull_to_refresh_image);
FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mInnerLayout.getLayoutParams();
switch (mode) {
case PULL_FROM_END:
lp.gravity=scrollDirection == PullToRefreshBase.Orientation.VERTICAL ? Gravity.TOP : Gravity.LEFT;
mPullLabel=context.getString(R.string.pull_to_refresh_from_bottom_pull_label);
mRefreshingLabel=context.getString(R.string.pull_to_refresh_from_bottom_refreshing_label);
mReleaseLabel=context.getString(R.string.pull_to_refresh_from_bottom_release_label);
break;
case PULL_FROM_START:
default :
lp.gravity=scrollDirection == PullToRefreshBase.Orientation.VERTICAL ? Gravity.BOTTOM : Gravity.RIGHT;
mPullLabel=context.getString(R.string.pull_to_refresh_pull_label);
mRefreshingLabel=context.getString(R.string.pull_to_refresh_refreshing_label);
mReleaseLabel=context.getString(R.string.pull_to_refresh_release_label);
break;
}
if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderBackground)) {
Drawable background=attrs.getDrawable(R.styleable.PullToRefresh_ptrHeaderBackground);
if (null != background) {
ViewCompat.setBackground(this,background);
}
}
if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderTextAppearance)) {
TypedValue styleID=new TypedValue();
attrs.getValue(R.styleable.PullToRefresh_ptrHeaderTextAppearance,styleID);
setTextAppearance(styleID.data);
}
if (attrs.hasValue(R.styleable.PullToRefresh_ptrSubHeaderTextAppearance)) {
TypedValue styleID=new TypedValue();
attrs.getValue(R.styleable.PullToRefresh_ptrSubHeaderTextAppearance,styleID);
setSubTextAppearance(styleID.data);
}
if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderTextColor)) {
ColorStateList colors=attrs.getColorStateList(R.styleable.PullToRefresh_ptrHeaderTextColor);
if (null != colors) {
setTextColor(colors);
}
}
if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderSubTextColor)) {
ColorStateList colors=attrs.getColorStateList(R.styleable.PullToRefresh_ptrHeaderSubTextColor);
if (null != colors) {
setSubTextColor(colors);
}
}
Drawable imageDrawable=null;
if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawable)) {
imageDrawable=attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawable);
}
switch (mode) {
case PULL_FROM_START:
default :
if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableStart)) {
imageDrawable=attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableStart);
}
 else if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableTop)) {
Utils.warnDeprecation("ptrDrawableTop","ptrDrawableStart");
imageDrawable=attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableTop);
}
break;
case PULL_FROM_END:
if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableEnd)) {
imageDrawable=attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableEnd);
}
 else if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableBottom)) {
Utils.warnDeprecation("ptrDrawableBottom","ptrDrawableEnd");
imageDrawable=attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableBottom);
}
break;
}
if (null == imageDrawable) {
imageDrawable=context.getResources().getDrawable(getDefaultDrawableResId());
}
setLoadingDrawable(imageDrawable);
reset();
}
