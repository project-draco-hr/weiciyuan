{
  AnimationRect rect=new AnimationRect();
  rect.isScreenPortrait=Utility.isDevicePort();
  Drawable drawable=imageView.getDrawable();
  Bitmap bitmap=null;
  if (drawable instanceof BitmapDrawable) {
    bitmap=((BitmapDrawable)drawable).getBitmap();
  }
  if (bitmap == null) {
    return null;
  }
  rect.widgetWidth=imageView.getWidth();
  rect.widgetHeight=imageView.getHeight();
  rect.thumbnailWidthHeightRatio=(float)bitmap.getWidth() / (float)bitmap.getHeight();
  rect.thumbnailWidth=bitmap.getWidth();
  rect.thumbnailHeight=bitmap.getHeight();
  rect.imageViewEntireRect=new Rect();
  int[] location=new int[2];
  imageView.getLocationOnScreen(location);
  rect.imageViewEntireRect.left=location[0];
  rect.imageViewEntireRect.top=location[1];
  rect.imageViewEntireRect.right=rect.imageViewEntireRect.left + imageView.getWidth();
  rect.imageViewEntireRect.bottom=rect.imageViewEntireRect.top + imageView.getHeight();
  rect.imageViewVisibleRect=new Rect();
  boolean isVisible=imageView.getGlobalVisibleRect(rect.imageViewVisibleRect);
  boolean checkWidth=rect.imageViewVisibleRect.width() < imageView.getWidth();
  boolean checkHeight=rect.imageViewVisibleRect.height() < imageView.getHeight();
  rect.isTotalVisible=isVisible && !checkWidth && !checkHeight;
  rect.isTotalInvisible=!isVisible;
  ImageView.ScaleType scaledType=imageView.getScaleType();
  Rect scaledBitmapRect=new Rect(rect.imageViewEntireRect);
  int bitmapWidth=bitmap.getWidth();
  int bitmapHeight=bitmap.getHeight();
  int imageViewWidth=imageView.getWidth();
  int imageViewHeight=imageView.getHeight();
  float startScale;
  int deltaX;
  int deltaY;
switch (scaledType) {
case CENTER_CROP:
    if ((float)imageViewWidth / bitmapWidth > (float)imageViewHeight / bitmapHeight) {
      startScale=(float)imageViewWidth / bitmapWidth;
      rect.type=TYPE_CLIP_V;
    }
 else {
      startScale=(float)imageViewHeight / bitmapHeight;
      rect.type=TYPE_CLIP_H;
    }
  bitmapHeight=(int)(bitmapHeight * startScale);
bitmapWidth=(int)(bitmapWidth * startScale);
deltaX=(imageViewWidth - bitmapWidth) / 2;
deltaY=(imageViewHeight - bitmapHeight) / 2;
scaledBitmapRect.set(scaledBitmapRect.left + deltaX,scaledBitmapRect.top + deltaY,scaledBitmapRect.right - deltaX,scaledBitmapRect.bottom - deltaY);
break;
case FIT_CENTER:
if ((float)imageViewWidth / bitmapWidth > (float)imageViewHeight / bitmapHeight) {
startScale=(float)imageViewHeight / bitmapHeight;
rect.type=TYPE_EXTEND_V;
}
 else {
startScale=(float)imageViewWidth / bitmapWidth;
rect.type=TYPE_EXTEND_H;
}
bitmapHeight=(int)(bitmapHeight * startScale);
bitmapWidth=(int)(bitmapWidth * startScale);
deltaX=(imageViewWidth - bitmapWidth) / 2;
deltaY=(imageViewHeight - bitmapHeight) / 2;
scaledBitmapRect.set(scaledBitmapRect.left + deltaX,scaledBitmapRect.top + deltaY,scaledBitmapRect.right - deltaX,scaledBitmapRect.bottom - deltaY);
break;
}
rect.scaledBitmapRect=scaledBitmapRect;
return rect;
}
