{
synchronized (TimeLineBitmapDownloader.pauseReadWorkLock) {
    while (TimeLineBitmapDownloader.pauseReadWork && !isCancelled()) {
      try {
        TimeLineBitmapDownloader.pauseReadWorkLock.wait();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
  if (isCancelled()) {
    return null;
  }
  String path=FileManager.getFilePathFromUrl(data,method);
  boolean downloaded=false;
  for (int i=0; i < 3; i++) {
    if (TaskCache.waitForPictureDownload(data,(SettingUtility.getEnableBigPic() ? downloadListener : null),path,method)) {
      downloaded=true;
      break;
    }
  }
  if (!downloaded) {
    failedResult=FailedResult.downloadFailed;
    return null;
  }
  int height=0;
  int width=0;
switch (method) {
case avatar_small:
case avatar_large:
    width=globalContext.getResources().getDimensionPixelSize(R.dimen.timeline_avatar_width) - Utility.dip2px(5) * 2;
  height=globalContext.getResources().getDimensionPixelSize(R.dimen.timeline_avatar_height) - Utility.dip2px(5) * 2;
break;
case picture_thumbnail:
width=globalContext.getResources().getDimensionPixelSize(R.dimen.timeline_pic_thumbnail_width);
height=globalContext.getResources().getDimensionPixelSize(R.dimen.timeline_pic_thumbnail_height);
break;
case picture_large:
case picture_bmiddle:
if (!isMultiPictures) {
DisplayMetrics metrics=globalContext.getDisplayMetrics();
float reSize=globalContext.getResources().getDisplayMetrics().density;
height=globalContext.getResources().getDimensionPixelSize(R.dimen.timeline_pic_high_thumbnail_height);
width=(int)(metrics.widthPixels - (8 + 8) * reSize);
}
 else {
height=width=Utility.dip2px(120);
}
break;
}
synchronized (TimeLineBitmapDownloader.pauseReadWorkLock) {
while (TimeLineBitmapDownloader.pauseReadWork && !isCancelled()) {
try {
TimeLineBitmapDownloader.pauseReadWorkLock.wait();
}
 catch (InterruptedException e) {
Thread.currentThread().interrupt();
}
}
}
if (isCancelled()) {
return null;
}
Bitmap bitmap;
switch (method) {
case avatar_small:
case avatar_large:
bitmap=ImageUtility.getRoundedCornerPic(path,width,height,Utility.dip2px(2));
break;
default :
bitmap=ImageUtility.getRoundedCornerPic(path,width,height,0);
break;
}
if (bitmap == null) {
this.failedResult=FailedResult.readFailed;
}
return bitmap;
}
