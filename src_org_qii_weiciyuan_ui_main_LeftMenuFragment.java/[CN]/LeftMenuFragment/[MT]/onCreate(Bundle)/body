{
  super.onCreate(savedInstanceState);
  setRetainInstance(false);
  addPreferencesFromResource(R.xml.slidingmenu_layout);
  final ViewPager mentionVP=(ViewPager)getActivity().findViewById(R.id.menu_right_vp_mention);
  final ViewPager commentVP=(ViewPager)getActivity().findViewById(R.id.menu_right_vp_comment);
  final View fl=getActivity().findViewById(R.id.menu_right_fl);
  findPreference("a").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      getSlidingMenu().setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN);
      if (index == 0) {
        ((MainTimeLineActivity)getActivity()).getSlidingMenu().showContent();
        return true;
      }
      index=0;
      getActivity().getActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
      getActivity().getActionBar().setTitle(GlobalContext.getInstance().getCurrentAccountName());
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      for (      Fragment f : commentFragments) {
        ft.hide(f);
      }
      for (      Fragment f : mentionFragments) {
        ft.hide(f);
      }
      Fragment fragment=((MainTimeLineActivity)getActivity()).getOrNewFriendsTimeLineFragment();
      if (fragment.isAdded() && fragment.isHidden()) {
        ft.show(fragment);
      }
 else       if (!fragment.isAdded()) {
        ft.add(R.id.menu_right_fl,fragment,FriendsTimeLineFragment.class.getName());
      }
      fl.setVisibility(View.VISIBLE);
      mentionVP.setVisibility(View.GONE);
      commentVP.setVisibility(View.GONE);
      ft.commit();
      ((MainTimeLineActivity)getActivity()).getSlidingMenu().showContent();
      return true;
    }
  }
);
  findPreference("b").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      getSlidingMenu().setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN);
      if (index == 1) {
        ((MainTimeLineActivity)getActivity()).getSlidingMenu().showContent();
        return true;
      }
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      Fragment fragment=((MainTimeLineActivity)getActivity()).getOrNewFriendsTimeLineFragment();
      ft.hide(fragment);
      for (      Fragment f : commentFragments) {
        ft.hide(f);
      }
      for (      Fragment f : mentionFragments) {
        ft.show(f);
      }
      ft.commit();
      ((MainTimeLineActivity)getActivity()).getSlidingMenu().showContent();
      fl.setVisibility(View.GONE);
      mentionVP.setVisibility(View.VISIBLE);
      commentVP.setVisibility(View.GONE);
      index=1;
      ActionBar.TabListener tabListener=new ActionBar.TabListener(){
        @Override public void onTabSelected(        ActionBar.Tab tab,        FragmentTransaction ft){
          if (mentionVP.getCurrentItem() != tab.getPosition())           mentionVP.setCurrentItem(tab.getPosition());
        }
        @Override public void onTabUnselected(        ActionBar.Tab tab,        FragmentTransaction ft){
        }
        @Override public void onTabReselected(        ActionBar.Tab tab,        FragmentTransaction ft){
        }
      }
;
      ActionBar actionBar=getActivity().getActionBar();
      getActivity().getActionBar().setTitle(getString(R.string.mentions));
      actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
      actionBar.removeAllTabs();
      actionBar.addTab(actionBar.newTab().setText("@?????????").setTabListener(tabListener));
      actionBar.addTab(actionBar.newTab().setText("@?????????").setTabListener(tabListener));
      mentionVP.setOnPageChangeListener(onPageChangeListener);
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          if (mentionVP.getAdapter() == null)           mentionVP.setAdapter(new MentionsTimeLinePagerAdapter(getFragmentManager()));
        }
      }
,500);
      return true;
    }
  }
);
  findPreference("c").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      if (index == 2) {
        ((MainTimeLineActivity)getActivity()).getSlidingMenu().showContent();
        return true;
      }
      index=2;
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      Fragment fragment=((MainTimeLineActivity)getActivity()).getOrNewFriendsTimeLineFragment();
      ft.hide(fragment);
      for (      Fragment f : commentFragments) {
        ft.show(f);
      }
      for (      Fragment f : mentionFragments) {
        ft.hide(f);
      }
      ft.commit();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          if (commentVP.getAdapter() == null)           commentVP.setAdapter(new CommentsTimeLinePagerAdapter(getFragmentManager()));
        }
      }
,500);
      ActionBar.TabListener tabListener=new ActionBar.TabListener(){
        @Override public void onTabSelected(        ActionBar.Tab tab,        FragmentTransaction ft){
          if (commentVP.getCurrentItem() != tab.getPosition())           commentVP.setCurrentItem(tab.getPosition());
        }
        @Override public void onTabUnselected(        ActionBar.Tab tab,        FragmentTransaction ft){
        }
        @Override public void onTabReselected(        ActionBar.Tab tab,        FragmentTransaction ft){
        }
      }
;
      ActionBar actionBar=getActivity().getActionBar();
      getActivity().getActionBar().setTitle(getString(R.string.comments));
      actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
      actionBar.removeAllTabs();
      actionBar.addTab(actionBar.newTab().setText("???????????????").setTabListener(tabListener));
      actionBar.addTab(actionBar.newTab().setText("???????????????").setTabListener(tabListener));
      commentVP.setOnPageChangeListener(onPageChangeListener);
      ((MainTimeLineActivity)getActivity()).getSlidingMenu().showContent();
      fl.setVisibility(View.GONE);
      mentionVP.setVisibility(View.GONE);
      commentVP.setVisibility(View.VISIBLE);
      return true;
    }
  }
);
  findPreference("d").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      return true;
    }
  }
);
  findPreference("e").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      startActivity(new Intent(getActivity(),SearchMainActivity.class));
      return true;
    }
  }
);
  findPreference("f").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      startActivity(new Intent(getActivity(),SettingActivity.class));
      return true;
    }
  }
);
  findPreference("g").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(getActivity(),AccountActivity.class);
      intent.putExtra("launcher",false);
      startActivity(intent);
      getActivity().finish();
      return true;
    }
  }
);
  findPreference("h").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(getActivity(),WriteWeiboActivity.class);
      intent.putExtra("token",GlobalContext.getInstance().getSpecialToken());
      intent.putExtra("account",GlobalContext.getInstance().getAccountBean());
      startActivity(intent);
      return true;
    }
  }
);
  findPreference("i").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(getActivity(),MyInfoActivity.class);
      intent.putExtra("token",GlobalContext.getInstance().getSpecialToken());
      intent.putExtra("user",GlobalContext.getInstance().getAccountBean().getInfo());
      intent.putExtra("account",GlobalContext.getInstance().getAccountBean());
      startActivity(intent);
      return true;
    }
  }
);
}
