{
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    setOrientation(LinearLayout.HORIZONTAL);
  break;
case VERTICAL:
default :
setOrientation(LinearLayout.VERTICAL);
break;
}
setGravity(Gravity.CENTER);
ViewConfiguration config=ViewConfiguration.get(context);
mTouchSlop=config.getScaledTouchSlop();
TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.PullToRefresh);
if (a.hasValue(R.styleable.PullToRefresh_ptrMode)) {
mMode=Mode.mapIntToValue(a.getInteger(R.styleable.PullToRefresh_ptrMode,0));
}
if (a.hasValue(R.styleable.PullToRefresh_ptrAnimationStyle)) {
mLoadingAnimationStyle=AnimationStyle.mapIntToValue(a.getInteger(R.styleable.PullToRefresh_ptrAnimationStyle,0));
}
mRefreshableView=createRefreshableView(context,attrs);
addRefreshableView(context,mRefreshableView);
mHeaderLayout=createLoadingLayout(context,Mode.PULL_FROM_START,a);
mFooterLayout=createLoadingLayout(context,Mode.PULL_FROM_END,a);
if (a.hasValue(R.styleable.PullToRefresh_ptrRefreshableViewBackground)) {
Drawable background=a.getDrawable(R.styleable.PullToRefresh_ptrRefreshableViewBackground);
if (null != background) {
mRefreshableView.setBackgroundDrawable(background);
}
}
 else if (a.hasValue(R.styleable.PullToRefresh_ptrAdapterViewBackground)) {
Utils.warnDeprecation("ptrAdapterViewBackground","ptrRefreshableViewBackground");
Drawable background=a.getDrawable(R.styleable.PullToRefresh_ptrAdapterViewBackground);
if (null != background) {
mRefreshableView.setBackgroundDrawable(background);
}
}
if (a.hasValue(R.styleable.PullToRefresh_ptrOverScroll)) {
mOverScrollEnabled=a.getBoolean(R.styleable.PullToRefresh_ptrOverScroll,true);
}
if (a.hasValue(R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled)) {
mScrollingWhileRefreshingEnabled=a.getBoolean(R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled,false);
}
handleStyledAttributes(a);
a.recycle();
updateUIForMode();
}
