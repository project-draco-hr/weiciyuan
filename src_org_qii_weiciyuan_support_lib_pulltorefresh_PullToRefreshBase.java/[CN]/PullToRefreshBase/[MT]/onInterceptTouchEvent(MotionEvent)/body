{
  if (!isPullToRefreshEnabled()) {
    return false;
  }
  final int action=event.getAction();
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mIsBeingDragged=false;
    return false;
  }
  if (action != MotionEvent.ACTION_DOWN && mIsBeingDragged) {
    return true;
  }
switch (action) {
case MotionEvent.ACTION_MOVE:
{
      if (!mScrollingWhileRefreshingEnabled && isRefreshing()) {
        return true;
      }
      if (isReadyForPull()) {
        final float y=event.getY(), x=event.getX();
        final float diff, oppositeDiff, absDiff;
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
          diff=x - mLastMotionX;
        oppositeDiff=y - mLastMotionY;
      break;
case VERTICAL:
default :
    diff=y - mLastMotionY;
  oppositeDiff=x - mLastMotionX;
break;
}
absDiff=Math.abs(diff);
if (absDiff > mTouchSlop && (!mFilterTouchEvents || absDiff > Math.abs(oppositeDiff))) {
if (mMode.showHeaderLoadingLayout() && diff >= 1f && isReadyForPullStart()) {
mLastMotionY=y;
mLastMotionX=x;
mIsBeingDragged=true;
if (mMode == Mode.BOTH) {
  mCurrentMode=Mode.PULL_FROM_START;
}
}
 else if (mMode.showFooterLoadingLayout() && diff <= -1f && isReadyForPullEnd()) {
mLastMotionY=y;
mLastMotionX=x;
mIsBeingDragged=true;
if (mMode == Mode.BOTH) {
  mCurrentMode=Mode.PULL_FROM_END;
}
}
}
}
break;
}
case MotionEvent.ACTION_DOWN:
{
if (isReadyForPull()) {
mLastMotionY=mInitialMotionY=event.getY();
mLastMotionX=mInitialMotionX=event.getX();
mIsBeingDragged=false;
}
break;
}
}
return mIsBeingDragged;
}
