{
  int newScrollValue;
  final int itemDimension;
  final float initialMotionValue, lastMotionValue;
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    initialMotionValue=mInitialMotionX;
  lastMotionValue=mLastMotionX;
break;
case VERTICAL:
default :
initialMotionValue=mInitialMotionY;
lastMotionValue=mLastMotionY;
break;
}
switch (mCurrentMode) {
case PULL_FROM_END:
newScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / FRICTION);
itemDimension=getFooterSize();
break;
case PULL_FROM_START:
default :
newScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / FRICTION);
itemDimension=getHeaderSize();
break;
}
if (getRefreshableView() instanceof AdapterView && isRefreshing()) {
int count=0;
Adapter adapter=((AdapterView)getRefreshableView()).getAdapter();
if (adapter instanceof HeaderViewListAdapter) {
count=((HeaderViewListAdapter)adapter).getWrappedAdapter().getCount();
}
if (count == 0) {
switch (mCurrentMode) {
case MANUAL_REFRESH_ONLY:
case PULL_FROM_END:
newScrollValue+=getFooterSize();
break;
default :
case PULL_FROM_START:
newScrollValue+=-getHeaderSize();
break;
}
}
}
setHeaderScroll(newScrollValue);
if (newScrollValue != 0 && !isRefreshing()) {
float scale=Math.abs(newScrollValue) / (float)itemDimension;
switch (mCurrentMode) {
case PULL_FROM_END:
mFooterLayout.onPull(scale);
break;
case PULL_FROM_START:
default :
mHeaderLayout.onPull(scale);
break;
}
if (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {
setState(State.PULL_TO_REFRESH);
}
 else if (mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) {
setState(State.RELEASE_TO_REFRESH);
}
}
}
