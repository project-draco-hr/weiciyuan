{
  if (TextUtils.isEmpty(url)) {
    return;
  }
  if (TaskCache.isThisUrlTaskFinished(url)) {
    callback.onSubmitJobButNotBegin();
  }
 else {
    callback.onSubmitJobButAlreadyBegin();
  }
  new MyAsyncTask<Void,Integer,String>(){
    WeakReference<Object> activityRef;
    @Override protected void onPreExecute(){
      super.onPreExecute();
      activityRef=new WeakReference<Object>(object);
      callback.onBegin();
    }
    @Override protected String doInBackground(    Void... params){
      boolean downloaded=TaskCache.waitForPictureDownload(url,new FileDownloaderHttpHelper.DownloadListener(){
        @Override public void pushProgress(        int progress,        int max){
          onProgressUpdate(progress,max);
        }
        @Override public void completed(){
        }
        @Override public void cancel(){
        }
      }
,FileManager.getFilePathFromUrl(url,method),method);
      return downloaded ? FileManager.getFilePathFromUrl(url,method) : null;
    }
    @Override protected void onProgressUpdate(    Integer... values){
      super.onProgressUpdate(values);
      if (!isComponentLifeCycleFinished()) {
        int progress=values[0];
        int max=values[1];
        callback.onUpdate(progress,max);
      }
    }
    @Override protected void onPostExecute(    String value){
      super.onPostExecute(value);
      if (!isComponentLifeCycleFinished()) {
        callback.onComplete(value);
      }
    }
    boolean isComponentLifeCycleFinished(){
      Object object=activityRef.get();
      if (object == null) {
        return true;
      }
      if (object instanceof Fragment) {
        Fragment fragment=(Fragment)object;
        if (fragment.getActivity() == null) {
          return true;
        }
      }
 else       if (object instanceof Activity) {
        Activity activity=(Activity)object;
        if (activity.isDestroyed()) {
          return true;
        }
      }
      return false;
    }
  }
.executeOnExecutor(MyAsyncTask.THREAD_POOL_EXECUTOR);
}
