{
  int initSize=getList().getSize();
  if (getActivity() != null && newValue.getSize() > 0) {
    if (hasActionMode()) {
      AppLogger.v("ListView have ActionMode, skip notifyDataSetChanged");
      return;
    }
    final HeaderListView headerListView=(HeaderListView)getListView();
    View firstChildView=getListView().getChildAt(0);
    boolean isFirstViewHeader=headerListView.isThisViewHeader(firstChildView);
    if (isFirstViewHeader && !headerListView.isInTouchByUser()) {
      if (!Utility.isJB2()) {
        getList().addNewData(newValue);
        getAdapter().notifyDataSetChanged();
        Utility.setListViewSelectionFromTop(getListView(),0,0);
        return;
      }
      final ListView listView=getListView();
      final ArrayList<Pair<Long,Bitmap>> previousViewsBitmap=new ArrayList<Pair<Long,Bitmap>>();
      final HashMap<Long,Integer> previousViewsTop=new HashMap<Long,Integer>();
      final HashMap<Long,View> previousViews=new HashMap<Long,View>();
      int childCount=listView.getChildCount();
      for (int i=0; i < childCount; i++) {
        View childView=listView.getChildAt(i);
        if (headerListView.isThisViewHeader(childView)) {
          continue;
        }
        int firstAdapterItemPosition=listView.getFirstVisiblePosition();
        int currentAdapterItemPosition=firstAdapterItemPosition + i - listView.getHeaderViewsCount();
        long currentAdapterItemId=getAdapter().getItemId(currentAdapterItemPosition);
        int childViewTop=childView.getTop();
        Bitmap bitmap=Utility.getBitmapFromView(childView);
        Pair<Long,Bitmap> pair=new Pair<Long,Bitmap>(currentAdapterItemId,bitmap);
        previousViewsBitmap.add(pair);
        previousViewsTop.put(currentAdapterItemId,childViewTop);
        childView.setHasTransientState(true);
        previousViews.put(currentAdapterItemId,childView);
      }
      getList().addNewData(newValue);
      getAdapter().notifyDataSetChanged();
      getListView().getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
        @Override public boolean onPreDraw(){
          listView.getViewTreeObserver().removeOnPreDrawListener(this);
          DecelerateInterpolator decelerateInterpolator=new DecelerateInterpolator();
          final ViewGroupOverlay overlay=listView.getOverlay();
          Set<Long> previousViewsId=previousViews.keySet();
          boolean somePreviousViewsAreStillInScreen=false;
          ArrayList<View> newAddedItemViews=new ArrayList<View>();
          int deltaY=0;
          int childCount=listView.getChildCount();
          for (int i=0; i < childCount; i++) {
            View childView=listView.getChildAt(i);
            if (headerListView.isThisViewHeader(childView)) {
              continue;
            }
            int firstAdapterItemPosition=listView.getFirstVisiblePosition();
            int currentAdapterItemPosition=firstAdapterItemPosition + i - listView.getHeaderViewsCount();
            long currentAdapterItemId=getAdapter().getItemId(currentAdapterItemPosition);
            if (previousViewsId.contains(currentAdapterItemId)) {
              somePreviousViewsAreStillInScreen=true;
              deltaY=childView.getTop() - previousViewsTop.get(currentAdapterItemId);
            }
 else {
              newAddedItemViews.add(childView);
            }
          }
          if (!somePreviousViewsAreStillInScreen) {
            deltaY=listView.getHeight();
          }
          for (          View view : newAddedItemViews) {
            view.setTranslationY(-deltaY);
            view.animate().translationY(0).setInterpolator(decelerateInterpolator);
          }
          for (          Pair<Long,Bitmap> pair : previousViewsBitmap) {
            long id=pair.first;
            int top=previousViewsTop.get(id);
            final View view=previousViews.get(id);
            final Bitmap bitmap=pair.second;
            final ImageView imageView=new ImageView(getActivity());
            imageView.setImageBitmap(bitmap);
            imageView.measure(View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED),View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED));
            imageView.layout(0,0,imageView.getMeasuredWidth(),imageView.getMeasuredHeight());
            overlay.add(imageView);
            imageView.setTranslationY(top);
            view.setAlpha(0);
            imageView.animate().translationY(top + deltaY).setInterpolator(decelerateInterpolator).withEndAction(new Runnable(){
              @Override public void run(){
                overlay.remove(imageView);
                bitmap.recycle();
                view.setAlpha(1.0f);
                view.setHasTransientState(false);
              }
            }
);
          }
          return true;
        }
      }
);
      return;
    }
    getList().addNewData(newValue);
    Runnable endAction=new Runnable(){
      @Override public void run(){
        newMsgTipBar.setValue(newValue,false);
        newMsgTipBar.setType(TopTipBar.Type.ALWAYS);
      }
    }
;
    if (isFirstViewHeader && headerListView.isInTouchByUser()) {
      int index=getListView().getFirstVisiblePosition();
      getAdapter().notifyDataSetChanged();
      int finalSize=getList().getSize();
      final int positionAfterRefresh=index + finalSize - initSize + getListView().getHeaderViewsCount();
      Utility.setListViewSelectionFromTop(getListView(),positionAfterRefresh,1,endAction);
      return;
    }
    int index=getListView().getFirstVisiblePosition();
    View firstAdapterItemView=Utility.getListViewFirstAdapterItemView(getListView());
    final int top=(firstAdapterItemView == null) ? 0 : firstAdapterItemView.getTop();
    getAdapter().notifyDataSetChanged();
    int finalSize=getList().getSize();
    final int positionAfterRefresh=index + finalSize - initSize;
    Utility.setListViewSelectionFromTop(getListView(),positionAfterRefresh,top,endAction);
  }
}
