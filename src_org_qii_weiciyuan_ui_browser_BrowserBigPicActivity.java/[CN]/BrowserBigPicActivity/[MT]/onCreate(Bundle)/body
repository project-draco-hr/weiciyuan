{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.browserbigpicactivity_layout);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  actionBar.setTitle(R.string.browser_picture);
  pb=(CircleProgressView)findViewById(R.id.pb);
  webView=(WebView)findViewById(R.id.iv);
  webView.setBackgroundColor(getResources().getColor(R.color.transparent));
  webView.getSettings().setJavaScriptEnabled(true);
  webView.getSettings().setUseWideViewPort(true);
  webView.getSettings().setLoadWithOverviewMode(true);
  webView.getSettings().setBuiltInZoomControls(true);
  webView.getSettings().setDisplayZoomControls(false);
  webView.setVerticalScrollBarEnabled(false);
  webView.setHorizontalScrollBarEnabled(false);
  webView.setOnTouchListener(new View.OnTouchListener(){
    boolean mPressed;
    boolean mClose;
    CheckForSinglePress mPendingCheckForSinglePress=new CheckForSinglePress();
    long lastTime=0;
    float[] location=new float[2];
    @Override public boolean onTouch(    View v,    MotionEvent event){
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
        mPressed=true;
      if (System.currentTimeMillis() - lastTime > ViewConfiguration.getDoubleTapTimeout()) {
        mClose=true;
        new Handler().postDelayed(mPendingCheckForSinglePress,ViewConfiguration.getDoubleTapTimeout());
      }
 else {
        mClose=false;
      }
    lastTime=System.currentTimeMillis();
  location[0]=event.getRawX();
location[1]=event.getRawY();
break;
case MotionEvent.ACTION_UP:
mPressed=false;
break;
case MotionEvent.ACTION_CANCEL:
mPressed=false;
break;
case MotionEvent.ACTION_MOVE:
float x=event.getRawX();
float y=event.getRawY();
if (Math.abs(location[0] - x) > 5.0f && Math.abs(location[1] - y) > 5.0f) {
mClose=false;
}
break;
}
return false;
}
class CheckForSinglePress implements Runnable {
public void run(){
if (!mPressed && mClose) finish();
}
}
}
);
msg=(MessageBean)getIntent().getSerializableExtra("msg");
if (Utility.isTaskStopped(task)) {
task=new PicSimpleBitmapWorkerTask();
task.executeOnExecutor(MyAsyncTask.THREAD_POOL_EXECUTOR);
}
}
